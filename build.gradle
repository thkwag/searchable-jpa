plugins {
    id 'org.springframework.boot' version '2.7.18' apply false
    id 'io.spring.dependency-management' version '1.0.15.RELEASE' apply false
    id 'java'
    id 'maven-publish'
}

ext {
    springBootVersion = '2.7.18'
    eclipseTransformerVersion = '0.2.0'
}

allprojects {
    group = 'com.github.thkwag.searchable'
    version = '0.0.3-SNAPSHOT'
    
    System.setProperty("spring.boot.version.check.enabled", "false")
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }

    if (project.name != 'searchable-jpa-example') {
        apply plugin: 'maven-publish'
        
        configurations {
            transformer
        }

        dependencies {
            transformer "org.eclipse.transformer:org.eclipse.transformer.cli:${eclipseTransformerVersion}"
        }

        task transformForJakarta(type: JavaExec) {
            classpath = configurations.transformer
            mainClass = 'org.eclipse.transformer.jakarta.JakartaTransformer'
            
            def outputJar = file("${buildDir}/libs/${project.name}-jakarta-${project.version}.jar")
            outputs.file(outputJar)
            
            def inputJar = tasks.jar.archiveFile.get().asFile
            args = [
                '--overwrite',
                '--quiet',
                inputJar.absolutePath,
                outputJar.absolutePath
            ]
            
            standardOutput = new ByteArrayOutputStream()
            errorOutput = new ByteArrayOutputStream()
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java

                    artifact source: tasks.transformForJakarta.outputs.files.singleFile, classifier: 'jakarta'
                    
                    pom {
                        def metadata = [
                            'searchable-jpa-core': [
                                name: 'Searchable JPA Core',
                                description: 'Core library for Searchable JPA'
                            ],
                            'searchable-jpa-openapi': [
                                name: 'Searchable JPA OpenAPI',
                                description: 'OpenAPI/Swagger support for Searchable JPA'
                            ],
                            'spring-boot-starter-searchable-jpa': [
                                name: 'Spring Boot Starter for Searchable JPA',
                                description: 'Spring Boot Starter for Searchable JPA'
                            ]
                        ]
                        if (metadata.containsKey(project.name)) {
                            def projectMetadata = metadata[project.name]
                            setName(projectMetadata['name'])
                            setDescription(projectMetadata['description'])
                        } else {
                            throw new GradleException("No metadata found for project: ${project.name}")
                        }
                        url = 'https://github.com/thkwag/searchable-jpa'
                        
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                id = 'thkwag'
                                name = 'Taehwan Kwag'
                            }
                        }
                        scm {
                            connection = 'scm:git:git://github.com/thkwag/searchable-jpa.git'
                            developerConnection = 'scm:git:ssh://github.com:thkwag/searchable-jpa.git'
                            url = 'https://github.com/thkwag/searchable-jpa'
                        }
                    }
                }
            }
            
            repositories {
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/thkwag/searchable-jpa")
                    credentials {
                        username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                        password = project.findProperty("gpr.token") ?: System.getenv("TOKEN")
                    }
                }
            }
        }

        tasks.transformForJakarta.dependsOn tasks.jar
        tasks.publish.dependsOn tasks.transformForJakarta
        tasks.assemble.dependsOn tasks.transformForJakarta
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.compilerArgs.addAll(['-parameters', "-Xlint:-deprecation", "-Xlint:-options"])
    }

    test {
        useJUnitPlatform()
    }
}

wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.BIN
}