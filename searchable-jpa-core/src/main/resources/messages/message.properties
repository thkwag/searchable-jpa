# Builder Messages
builder.dto.class.required=DTO class must not be null
builder.field.required=Field must not be null
builder.value.required=Value must not be null
builder.value.between.required=Both start and end values must not be null for BETWEEN operator
builder.value.collection.required=Value must be a collection for IN/NOT_IN operator
builder.sort.required=Sort must not be null
builder.sort.field.required=Sort field must not be null
builder.sort.field.not.found=Sort field {0} not found
builder.sort.field.not.sortable=Field {0} is not marked as sortable
builder.condition.required=Condition must not be null
builder.condition.group.required=Condition group must not be null
builder.condition.operator.required=Operator must not be null
builder.condition.value.type=Value type mismatch: expected {0}, found {1}
builder.condition.value.collection.size=Collection must have exactly {0} elements for {1} operator
# Validator Messages
validator.field.required=Field name is required
validator.field.invalid=Invalid field name: {0}
validator.field.not.found=Field {0} not found in {1}
validator.field.not.supported=Operator {0} is not allowed
validator.field.not.comparable=Field {0} is not comparable
validator.field.not.collection=Field {0} is not a collection type
validator.field.not.string=Field {0} is not a string type
validator.field.not.temporal=Field {0} is not a temporal type
validator.field.not.number=Field {0} is not a numeric type
validator.field.not.sortable=Following fields are not sortable: {0}
validator.field.not.searchable=Field {0} is not searchable
validator.operator.not.allowed=Operator {0} is not allowed for field {1}. Allowed operators: {2}
validator.value.null.not.allowed=Value cannot be null for operator: {0}
validator.pagination.both.required=Both page and size must be set for pagination
validator.pagination.page.invalid=Page number must be greater than or equal to 0
validator.pagination.size.invalid=Page size must be greater than 0
# Search Condition Messages
search.condition.json.invalid=Invalid JSON format for search condition
search.condition.direction.invalid=Invalid sort direction: {0}
search.condition.node.type.invalid=Invalid node type in search condition
search.condition.group.invalid=Invalid group structure in search condition
search.condition.condition.invalid=Invalid condition structure in search condition
search.condition.value.invalid=Invalid value format: {0}
search.condition.operator.invalid=Invalid operator: {0}
search.condition.search.operator.invalid=Invalid search operator: {0}
search.condition.field.required=Field is required
search.condition.datetime.invalid=Invalid datetime format 
# Validation Messages
validator.sort.orders.required=Sort orders cannot be null
validator.sort.orders.min=At least one sort order must be specified
validator.sort.field.required=Sort field must not be blank
validator.sort.direction.required=Sort direction must not be null
# Parser Messages
parser.parse.error=Failed to parse search parameters
parser.numeric.nonnegative={0} must be non-negative
parser.numeric.invalid={0} must be a valid number
parser.sort.invalid=Invalid sort format: {0}
parser.field.invalid=Invalid field format: {0}
parser.operator.invalid=Invalid operator: {0}
parser.operator.requires.two.values={0} operator requires exactly 2 values 
# Additional Validator Messages
validator.field.validation.failed=Failed to validate field: {0}
validator.property.not.found=Failed to find property: {0}
validator.value.must.be.collection=Value must be a collection for field {0}, but was: {1}
validator.collection.empty=Collection cannot be empty for field: {0}
validator.value.type.conversion=Cannot convert value of type {0} to type {1} for field {2}
validator.value.invalid=Invalid value for field {0}: {1}
# Schema Messages
schema.search.condition=Search condition for filtering and pagination
schema.search.condition.nodes=List of search conditions or condition groups
schema.search.condition.sort=Sort options
schema.search.condition.page=Page number (0-based)
schema.search.condition.size=Page size
schema.search.condition.node=Base class for search condition nodes
schema.search.condition.condition=Single search condition
schema.search.condition.field=Field name to search on
schema.search.condition.operator=Search operator
schema.search.condition.value=Search value
schema.search.condition.group=Group of search conditions
schema.search.condition.group.operator=Logical operator for the group
schema.search.condition.group.conditions=List of nested conditions or groups
schema.search.condition.sort.config=Sort configuration
schema.search.condition.order=Sort order configuration
schema.search.condition.order.field=Field name to sort by
schema.search.condition.order.direction=Sort direction 